@page "/flights"
@using Assignment2.Data
@inject FlightManager flightManager

@*list the available flights from the text file*@
<div id="flightsTop" class="flex">
        <div id="flights" class="flex">
            <div id="flightsTableHeader" class="flex">
                <h3>Flights</h3>
            </div>
            <div id="flightsTable" class="flex">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Code</th>
                            <th>Airline</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Weekday</th>
                            <th>Time</th>
                            <th>Seats</th>
                            <th>Cost/Seat</th>
                        </tr>
                    </thead>
                    <tbody class="ft-body">
                        @foreach (var flight in flightList)
                        {
                            <tr>
                                <td>@flight.Code</td>
                                <td>@flight.Airline</td>
                                <td>@flight.From</td>
                                <td>@flight.To</td>
                                <td>@flight.Weekday</td>
                                <td>@flight.Time</td>
                                <td>@flight.Seats</td>
                                <td>@flight.CostPerSeat</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

@* RESERVE *@
    <div id="reserve" class="flex">
        <div id="reserveHeader" class="flex">
            <h3>Reserve</h3>
        </div>
        <div class="flex">
            <label for="flight" class="res-lcol">Flight:</label>
            <input type="text" class="res-rcol" />
        </div>
        <div class="flex">
            <label for="airline" class="res-lcol">Airline:</label>
            <input type="text" class="res-rcol" />
        </div>
        <div class="flex">
            <label for="day" class="res-lcol">Day:</label>
            <input type="text" class="res-rcol" />
        </div>
        <div class="flex">
            <label for="time" class="res-lcol">Time:</label>
            <input type="text" class="res-rcol" />
        </div>
        <div class="flex">
            <label for="cost" class="res-lcol">Cost:</label>
            <input type="text" class="res-rcol" />
        </div>

        <div class="flex">
            <label for="name" class="res-lcol">Name:</label>
            <input type="text" class="res-rcol" />
        </div>

        <div class="flex">
            <label for="citz" class="res-lcol">Citizenship:</label>
            <input type="text" class="res-rcol" />
        </div>

        <div>
            <button type="submit" class="btn btn-default btn-reserve">Reserve</button>
        </div>
    </div>


@* FLIGHTFINDER *@ 
    <div id="flightFinder" class="flex">
        <div id="flightFinderHeader" class="flex">
            <h3>Flight Finder</h3>
        </div>

        @*dropdown for 'FROM'*@
        <div class="from-dropdown flex">
            <label class="ff-lcol" >From: </label>
            <select class="form-control" @bind="@fromInput">
                <option>Select an Origin</option>
                @foreach(var a in airportList)
                {
                    <option value = "@a.Code">@a.Code</option>
                }
            </select>
        </div>

        @*dropdown for 'TO'*@
        <div class="to-dropdown flex">
            <label class="ff-lcol" >To: </label>
            <select class="form-control" @bind="@toInput">
                <option>Select a Destination</option>
                @foreach (var a in airportList)
                {
                    <option value="@a.Code">@a.Code</option>
                }
            </select>
        </div>

        @*dropdown for 'DAY'*@
        <div class="day-dropdown flex">
            <label class="ff-lcol" >Day: </label>
            <select class="form-control" @bind="@weekdayInput">
                <option>Select a Day</option>
                <option>Sunday</option>
                <option>Monday</option>
                <option>Tuesday</option>
                <option>Wednesday</option>
                <option>Thursday</option>
                <option>Friday</option>
                <option>Saturday</option>
            </select>
        </div>

        <button type="submit" class="btn btn-default ff-btn" @onclick="@Find_Flight">Find Flights</button>
    </div>

</div>


@code {
    List<Flight> flightList = FlightManager.GetFlights();
    List<Airport> airportList = FlightManager.GetAirports();
    public string selectedFlight;
    public string selectedAirport;
    public string fromInput = "Select an Origin";
    public string toInput = "Select a Destination";
    public string weekdayInput = "Select a Day";

    private void ShowFlight(ChangeEventArgs f)
    {
        selectedFlight = f.Value.ToString();
    }

    private void ShowAirport(ChangeEventArgs a)
    {
        selectedAirport = a.Value.ToString();
    }


    //Button function
    protected async void Find_Flight()
    {
        //Resets the list before searching in the case of previous searches 
        await base.OnInitializedAsync();
        flightList = FlightManager.revertList();

        await base.OnInitializedAsync();
        flightList = FlightManager.findFlightByRange(flightList, fromInput, toInput, weekdayInput);

        //Check if only one of them is picked
        if (fromInput != "Select an Origin")
        {
            await base.OnInitializedAsync();
            flightList = FlightManager.findFlightByFrom(flightList, fromInput);
        }
        if (toInput != "Select a Destination")
        {
            await base.OnInitializedAsync();
            flightList = FlightManager.findFlightByTo(flightList, toInput);
        }
        if (weekdayInput != "Select a Day")
        {
            await base.OnInitializedAsync();
            flightList = FlightManager.findFlightByWeekday(flightList, weekdayInput);
        }

        //Case if default options is picked
        if ((fromInput == "Select an Origin") && (toInput == "Select a Destination") && (weekdayInput == "Select a Day"))
        {
            await base.OnInitializedAsync();
            flightList = FlightManager.revertList();
        }
    }

}
